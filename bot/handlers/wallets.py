from aiogram import Router, types, filters, F
from aiogram.filters import CommandObject
from aiogram.fsm.context import FSMContext
from bot.states.wallet_states import WalletStates
from db.crud import add_wallet, get_wallets_by_user, delete_wallet_by_user
from sqlalchemy.ext.asyncio import AsyncSession
from db.session import get_async_session


wallets_router = Router()


@wallets_router.message(filters.Command("add"))
async def cmd_start_add_wallet(msg: types.Message, state: FSMContext):
    await msg.answer("üìù –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –≥–∞–º–∞–Ω—Ü—è:")
    await state.set_state(WalletStates.waiting_for_wallet_name)
    print(state)


@wallets_router.message(filters.StateFilter(WalletStates.waiting_for_wallet_name))
async def process_wallet_name(msg: types.Message, state: FSMContext):
    await state.update_data(wallet_name=msg.text.strip())
    await msg.answer("üì• –¢–µ–ø–µ—Ä –≤–≤–µ–¥–∏ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è:")
    await state.set_state(WalletStates.waiting_for_wallet_address)


@wallets_router.message(filters.StateFilter(WalletStates.waiting_for_wallet_address))
async def process_wallet_address(
        msg: types.Message,
        state: FSMContext,
        session: AsyncSession
):
    data = await state.get_data()
    name = data.get("wallet_name")
    address = msg.text.strip()
    user_id = msg.from_user.id

    await add_wallet(session, user_id=user_id, name=name, address=address)
    await msg.answer(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å '{name}' –∑ –∞–¥—Ä–µ—Å–æ—é `{address}` –¥–æ–¥–∞–Ω–æ!", parse_mode="Markdown")
    await state.clear()


# @wallets_router.message(filters.Command("list"))
# async def list_wallets(msg: types.Message, session: AsyncSession):
#     user_id = msg.from_user.id
#     wallets = await get_wallets_by_user(session, user_id)
#
#     if not wallets:
#         await msg.answer("–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
#         return
#
#     response = "–í–∞—à—ñ –≥–∞–º–∞–Ω—Ü—ñ:\n"
#     for w in wallets:
#         response += f"‚Ä¢ {w.name}: {w.address}\n"
#     await msg.answer(response)


@wallets_router.message(filters.Command("delete"))
async def delete_wallet(msg: types.Message, command: CommandObject, session: AsyncSession):
    args = command.args
    if not args:
        await msg.answer("‚ùå –í–∫–∞–∂–∏ –Ω–∞–∑–≤—É –∞–±–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è: `/delete MyWallet` –∞–±–æ `/delete Hf1Z...`",
                         parse_mode="Markdown")
        return

    user_id = msg.from_user.id

    success = await delete_wallet_by_user(session, user_id=user_id, name_or_address=args.strip())

    if success:
        await msg.answer("‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await msg.answer("‚ö†Ô∏è –ì–∞–º–∞–Ω–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
#
#
# @wallets_router.message(filters.Command("stats"))
# async def stats_all_wallets(msg: types.Message, session: AsyncSession = F.depends(get_async_session)):
#     user_id = msg.from_user.id
#     wallets = await get_wallets_by_user(session, user_id)
#
#     if not wallets:
#         await msg.answer("–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –≥–∞–º–∞–Ω—Ü—ñ–≤.")
#         return
#
#     # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
#     response_lines = []
#     total_transactions_all = 0
#     successful_transactions_all = 0
#
#     for wallet in wallets:
#         total = 100  # —Ñ–µ–π–∫–æ–≤—ñ –∑–∞–≥–∞–ª—å–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
#         successful = 75  # —Ñ–µ–π–∫–æ–≤—ñ —É—Å–ø—ñ—à–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
#         winrate = (successful / total) * 100
#
#         total_transactions_all += total
#         successful_transactions_all += successful
#
#         response_lines.append(
#             f"–ì–∞–º–∞–Ω–µ—Ü—å '{wallet.name}':\n"
#             f"  –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {total}\n"
#             f"  –£—Å–ø—ñ—à–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {successful}\n"
#             f"  Winrate: {winrate:.2f}%\n"
#         )
#
#     overall_winrate = (successful_transactions_all / total_transactions_all) * 100 if total_transactions_all > 0 else 0
#
#     response_lines.append(
#         f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö:\n"
#         f"  –í—Å—å–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {total_transactions_all}\n"
#         f"  –£—Å–ø—ñ—à–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: {successful_transactions_all}\n"
#         f"  –ó–∞–≥–∞–ª—å–Ω–∏–π Winrate: {overall_winrate:.2f}%"
#     )
#
#     await msg.answer("\n".join(response_lines))

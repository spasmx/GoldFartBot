from aiogram import Router, types, F, filters
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.state.wallet_states import WalletStates

menu_router = Router()

# –¢–∏–º—á–∞—Å–æ–≤–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—ñ–≤
wallets = {}


# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–¥–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å", callback_data="menu_add_wallet")
    kb.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
    kb.button(text="‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–º–∫–æ–π–Ω", callback_data="menu_token_info")
    kb.button(text="‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data="menu_settings")
    kb.adjust(2)
    return kb.as_markup()


def back_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
    kb.adjust(1)
    return kb.as_markup()


@menu_router.message(filters.Command("menu"))
async def show_main_menu(msg: types.Message):
    text = (
        "üëã –í—ñ—Ç–∞—é —É –º–µ–Ω—é –±–æ—Ç–∞!\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:\n\n"
        "‚ûï ‚Äî –î–æ–¥–∞–π—Ç–µ –≥–∞–º–∞–Ω–µ—Ü—å, —â–æ–± –ø–æ—á–∞—Ç–∏ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó.\n"
        "üìä ‚Äî –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å–ø—ñ—à–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.\n"
        "‚ÑπÔ∏è ‚Äî –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –ø—Ä–æ –º–µ–º–∫–æ–π–Ω —ñ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –π–æ–≥–æ –Ω–∞ Dex Screener.\n"
        "‚öôÔ∏è ‚Äî –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞."
    )
    await msg.answer(text, reply_markup=main_menu())


@menu_router.callback_query()
async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data

    if data == "menu_add_wallet":
        await callback.message.edit_text(
            "üì• –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è:",
            reply_markup=back_menu()
        )
        await state.set_state(WalletStates.waiting_for_wallet_address)

    elif data == "menu_stats":
        user_wallets = wallets.get(callback.from_user.id, [])
        if not user_wallets:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –≥–∞–º–∞–Ω—Ü—ñ–≤.", reply_markup=back_menu())
        else:
            response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            for w in user_wallets:
                response += f"‚Ä¢ {w['name']}: {w['address']}\n"
            await callback.message.edit_text(response, reply_markup=back_menu())
        await callback.answer()

    elif data == "menu_token_info":
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ Dex Screener", url="https://dexscreener.com/solana")
        kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
        kb.adjust(1)
        await callback.message.edit_text("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–µ–º–∫–æ–π–Ω:", reply_markup=kb.as_markup())
        await callback.answer()

    elif data == "menu_settings":
        await callback.message.edit_text("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=back_menu())
        await callback.answer()

    elif data == "menu_back":
        await callback.message.edit_text("üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        await callback.answer()


# –°—Ç–∞–Ω 1: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∞–¥—Ä–µ—Å—É
@menu_router.message(WalletStates.waiting_for_wallet_address)
async def get_wallet_address(msg: types.Message, state: FSMContext):
    address = msg.text.strip()
    await state.update_data(wallet_address=address)
    await state.set_state(WalletStates.waiting_for_wallet_name)
    await msg.answer("üìù –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å *–Ω–∞–∑–≤—É –≥–∞–º–∞–Ω—Ü—è*:", parse_mode="Markdown")


# –°—Ç–∞–Ω 2: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É
@menu_router.message(WalletStates.waiting_for_wallet_name)
async def get_wallet_name(msg: types.Message, state: FSMContext):
    name = msg.text.strip()
    data = await state.get_data()
    address = data.get("wallet_address")

    user_id = msg.from_user.id
    user_wallets = wallets.get(user_id, [])
    user_wallets.append({"name": name, "address": address})
    wallets[user_id] = user_wallets

    await msg.answer(f"‚úÖ –ì–∞–º–∞–Ω–µ—Ü—å '{name}' –∑ –∞–¥—Ä–µ—Å–æ—é `{address}` –¥–æ–¥–∞–Ω–æ!", parse_mode="Markdown")
    await state.clear()
    await msg.answer("üëã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
